name: "Build and Push Image to ECR"
description: "Builds, tags, and pushes Docker image to ECR"
inputs:
  ecr-repository:
    description: "Name of repository in ECR to push to"
    required: true
  aws-access-key-id: 
    required: true
  aws-secret-access-key:
    required: true
  aws-region:
    required: true
  image_tags:
    description: |
      An optional comma separated list of tags to apply to the image.
      When not provided, the commit SHA and branch name will be used for tagging
      the image.
    required: false
    default: ""
  path:
    description: Path to the directory with Docker image resources.
    required: false
    default: "."
  create_repo:
    description: Tries to create the underyling ECR repo if it doesn't already exist.
    default: true
    type: boolean
    required: false
  
  # Cache
  default-cache-tag:
    description: An image tag that should be pulled by Docker for improved caching.
    type: string
    required: false
    default: "main"
  cache-targets:
    description: A comma separated list of Docker targets that need to be cached individually.
    type: string
    required: false
    default: ""

  # AWS credentials
  pass-aws-creds-build-args:
    description: |
      Indicates whether the AWS credentials should be passed to the docker build
      command as --build-arg
    default: true
    type: boolean
    required: false

  # CodeArtifact
  pass-codeartifact-token:
    description: |
      Indicates whether to obtain a CodeArtifact token and pass it to the docker build
      command as a secret named CODEARTIFACT_AUTH_TOKEN
    default: false
    type: boolean
    required: false
  codeartifact-region:
    description: AWS region of the CodeArtifact repository
    default: us-west-2
    type: string
    required: false
  codeartifact-domain:
    description: Name of the CodeArtifact repository domain
    default: el8-global
    type: string
    required: false
  codeartifact-domain-owner:
    description: AWS owner account of the CodeArtifact repository
    default: ""
    type: string
    required: false
outputs:
  image:
    description: "The URI for the Docker image in ECR"
    value: ${{ steps.build.outputs.image }}
  image_tag:
    description: "The tag based on gitsha that the image is tagged with in ECR"
    value: ${{ steps.build.outputs.image_tag }}
runs:
  using: "composite"
  steps:
    - name: Configure CI credentials
      id: configure_init_creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: 'no'

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ECR Repo if it doesn't exist
      id: create-ecr-repo
      if: inputs.create_repo == 'true'
      run: aws ecr describe-repositories --repository-names ${{ inputs.ecr-repository }} || aws ecr create-repository --repository-name ${{ inputs.ecr-repository }}
      shell: bash

    - name: Determine image tags
      run: |
        image_tags="${{ inputs.image_tags }}"
        if [ -z "$image_tags" ]
        then
          branch_tag=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g' | sed 's/\\/_/g')
          image_tag="${{ github.sha }}"
          image_tags="$branch_tag,$image_tag"
        fi
        echo "IMAGE_TAGS=$image_tags" >> $GITHUB_ENV
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build & Push
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAGS: ${{ env.IMAGE_TAGS }}
        DEFAULT_CACHE_TAG: ${{ inputs.default-cache-tag }}
        DOCKER_PATH: ${{ inputs.path }}
      run: |
        # Constructing the docker build command according to the input
        docker_build_cmd="docker buildx build --build-arg BUILDKIT_INLINE_CACHE=1"

        # Cache sources
        cache_tags="$IMAGE_TAGS,$DEFAULT_CACHE_TAG"
        for tag in ${cache_tags//,/ }
        do
          docker_build_cmd+=" --cache-from $ECR_REGISTRY/${{ inputs.ecr-repository }}:$tag"
        done

        # Input: pass-aws-creds-build-args
        if [[ "${{ inputs.pass-aws-creds-build-args }}" == "true" ]]; then
          docker_build_cmd+=" --build-arg AWS_ACCESS_KEY_ID=${{ inputs.aws-access-key-id }}"
          docker_build_cmd+=" --build-arg AWS_SECRET_ACCESS_KEY=${{ inputs.aws-secret-access-key }}"
          docker_build_cmd+=" --build-arg AWS_DEFAULT_REGION=${{ inputs.aws-region }}"
        fi

        # Input: pass-codeartifact-token
        if [[ "${{ inputs.pass-codeartifact-token }}" == "true" ]]; then
          export CODEARTIFACT_AUTH_TOKEN=$(\
            AWS_ACCESS_KEY_ID=${{ inputs.aws-access-key-id }} \
            AWS_SECRET_ACCESS_KEY=${{ inputs.aws-secret-access-key }} \
            aws --region ${{ inputs.codeartifact-region}} \
              codeartifact get-authorization-token \
              --domain ${{ inputs.codeartifact-domain }} \
              --domain-owner ${{ inputs.codeartifact-domain-owner }} \
              --query authorizationToken \
              --output text)
          
          docker_build_cmd+=" --secret id=CODEARTIFACT_AUTH_TOKEN,env=CODEARTIFACT_AUTH_TOKEN"
        fi

        # Building individual targets one by one and pushing them under the "cache-" tags.
        # This is a workaround for pushing caches into ECR that doesn't support
        # BuildKit's mode=max when building multi-stage images.
        # See https://github.com/aws/containers-roadmap/issues/876
        cache_targets="${{ inputs.cache-targets }}"
        for target in ${cache_targets//,/ }
        do
          docker_build_cmd+=" --cache-from $ECR_REGISTRY/${{ inputs.ecr-repository }}:cache-$target"
        done

        for target in ${cache_targets//,/ }
        do
          docker_target_build_cmd="$docker_build_cmd --target $target -t $ECR_REGISTRY/${{ inputs.ecr-repository }}:cache-$target --push ${DOCKER_PATH}"
          echo $docker_target_build_cmd
          eval $docker_target_build_cmd
        done

        for tag in ${IMAGE_TAGS//,/ }
        do
          docker_build_cmd+=" -t $ECR_REGISTRY/${{ inputs.ecr-repository }}:$tag"
          echo "::set-output name=image::$ECR_REGISTRY/${{ inputs.ecr-repository }}:$tag"
          echo "::set-output name=image_tag::$tag"
        done

        docker_build_cmd+=" --push ${DOCKER_PATH}"

        echo $docker_build_cmd
        eval $docker_build_cmd
      shell: bash
