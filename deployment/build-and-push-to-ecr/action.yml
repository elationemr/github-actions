name: "Build and Push Image to ECR"
description: "Builds, tags, and pushes Docker image to ECR"
inputs:
  ecr-repository:
    description: "Name of repository in ECR to push to"
    required: true
  aws-access-key-id: 
    required: true
  aws-secret-access-key:
    required: true
  aws-region:
    required: true
  image_tags:
    description: |
      An optional comma separated list of tags to apply to the image.
      When not provided, the commit SHA and branch name will be used for tagging
      the image.
    required: false
    default: ""
  default-cache-tag:
    description: An image tag that should be pulled by Docker for improved caching.
    required: false
    default: "main"
  path:
    description: Path to the directory with Docker image resources.
    required: false
    default: "."
  push_image:
    description: Toggles whether the Docker image is pushed to ECR.
    default: true
    required: false
  create_ecr:
    description: Create an ECR repo if one doesn't exist already.
    default: true
    required: false
outputs:
  image:
    description: "The URI for the Docker image in ECR"
    value: ${{ steps.build-image.outputs.image }}
  image_tag:
    description: "The tag based on gitsha that the image is tagged with in ECR"
    value: ${{ steps.build-image.outputs.image_tag }}
runs:
  using: "composite"
  steps:
    - name: Configure CI credentials
      id: configure_init_creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: 'no'

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ECR Repo if it doesn't exist
      if: ${{ inputs.create_ecr }} == true
      id: create-ecr-repo
      run: aws ecr describe-repositories --repository-names ${{ inputs.ecr-repository }} || aws ecr create-repository --repository-name ${{ inputs.ecr-repository }}
      shell: bash


    - name: Determine image tags
      run: |
        image_tags="${{ inputs.image_tags }}"
        if [ -z "$image_tags" ]
        then
          branch_tag=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g' | sed 's/\\/_/g')
          image_tag="${{ github.sha }}"
          image_tags="$branch_tag,$image_tag"
        fi
        echo "IMAGE_TAGS=$image_tags" >> $GITHUB_ENV
      shell: bash

    - name: Pull Docker Base Image Cache
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAGS: ${{ env.IMAGE_TAGS }}
        DEFAULT_CACHE_TAG: ${{ inputs.default-cache-tag }}
      run: |
        cache_tags="$IMAGE_TAGS,$DEFAULT_CACHE_TAG"

        # Iterate through all the tags until a successful pull
        for tag in ${cache_tags//,/ }
        do
          docker pull $ECR_REGISTRY/${{ inputs.ecr-repository }}:$tag && echo "CACHE_TAG=$tag" >> $GITHUB_ENV && break || true
        done
      shell: bash

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        GIT_SHA: ${{ github.sha }}
        CACHE_TAG: ${{ env.CACHE_TAG }}
        DOCKER_PATH: ${{ inputs.path }}
        IMAGE_TAGS: ${{ env.IMAGE_TAGS }}
      run: |
        internal_tag="${{ inputs.ecr-repository }}:internal-${GIT_SHA}-$(date +%s)"

        docker build --build-arg AWS_ACCESS_KEY_ID=${{ inputs.aws-access-key-id }} --build-arg AWS_SECRET_ACCESS_KEY=${{ inputs.aws-secret-access-key }} --build-arg AWS_DEFAULT_REGION=${{ inputs.aws-region }} --cache-from ${ECR_REGISTRY}/${{ inputs.ecr-repository }}:$CACHE_TAG -t ${internal_tag} ${DOCKER_PATH}
        if [ "${{inputs.push_image}}" == "true" ]; then
          for tag in ${IMAGE_TAGS//,/ }
          do
            ecr_image="$ECR_REGISTRY/${{ inputs.ecr-repository }}:$tag"
            docker tag $internal_tag $ecr_image
            docker push $ecr_image
            echo "::set-output name=image::$ECR_REGISTRY/${{ inputs.ecr-repository }}:$tag"
            echo "::set-output name=image_tag::$tag"
          done
        else
          echo "Skipping tag and push process."
        fi
      shell: bash
